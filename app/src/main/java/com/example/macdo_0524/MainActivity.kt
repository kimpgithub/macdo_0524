package com.example.macdo_0524

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.material3.Button
import androidx.compose.material3.Divider
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.style.LineHeightStyle
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.navigation.NavHostController
import androidx.navigation.compose.NavHost
import androidx.navigation.compose.composable
import androidx.navigation.compose.rememberNavController
import com.example.macdo_0524.ui.theme.MACDO_0524Theme

class MainActivity : ComponentActivity() {

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            MACDO_0524Theme {
                AppNavigator()
            }
        }
    }
}

@Composable
fun AppNavigator() {
    val navController = rememberNavController()
    NavHost(navController, startDestination = "main") {
        composable("main") { MainScreen(navController) }
        composable("second") { SecondScreen(navController) }
    }
}

data class ButtonItem(val label: String, val imageRes: Int)

@Composable
fun MainScreen(navController: NavHostController) {

    val buttonItems = listOf(
        ButtonItem("üçî Î∞îÏò§Ìå®Î∞ÄÎ¶¨ÏôÄ Ìï®Íªò Ìï¥Ïâ¨Î∏åÎùºÏö¥!", R.drawable.macdo_1_2),
        ButtonItem("üçü Îß•ÎèÑÎÇ†ÎìúÏôÄ Ïã†ÏÑ†Ìïú ÏãùÏû¨Î£å Ï∞æÍ∏∞ Í≤åÏûÑ ÎåÄÍ≥µÍ∞ú", R.drawable.macdo_1_3),
        ButtonItem("üçî Î∞îÏò§Ìå®ÏùºÎ¶¨ Ìà¨Í≤åÎçî Ìå© Ï∂úÏãú!", R.drawable.macdo_1_4),
        ButtonItem("üçü Í∞ÄÏÑ±ÎπÑ Í∞ÑÏãù ÎßõÏßë \n Îß•ÎèÑÎÇ†Îìú Ìï¥ÌîºÏä§ÎÇµ!", R.drawable.macdo_1_5),
        ButtonItem("üçî Îß•ÏúôÏùÄ Î™ªÏ∞∏ÏßÄ! \n Ïò§ÎäòÎ∂ÄÌÑ∞ 1Ïùº 1Îß•Ïúô!", R.drawable.macdo_1_6),
        ButtonItem("üçü Îπ†ÏÇ≠ÌïòÍ≤å Îπ†Ï†∏ÎìúÎäî Îßõ, \n Îß•ÌÅ¨Î¶¨Ïä§Ìîº!", R.drawable.macdo_1_7),
        ButtonItem("üçî Îã®Ïß†Ï¥âÏ¥â Îß•Í∑∏Î¶¨Îì§Î°ú \n Îî∞ÎúªÌïòÍ≤å Ï±ÑÏö∞Îäî ÏïÑÏπ®", R.drawable.macdo_1_8),
        ButtonItem("üçü Í∞ì Íµ¨ÏõåÎÇ∏ Îî∞ÎúªÌïòÍ≥† Ïã†ÏÑ†Ìïú \n Î≤†Ïù¥Ïª® ÌÜ†ÎßàÌÜ† ÏóêÍ∑∏ Î®∏ÌïÄ!", R.drawable.macdo_1_9),
        ButtonItem("üçî ÏÉÅÌÅºÎã¨ÏΩ§! \n NEW Ï≤úÎèÑÎ≥µÏà≠ÏïÑ Ïπ†Îü¨ Ï∂úÏãú!", R.drawable.macdo_1_10)
    )

    Scaffold(
        modifier = Modifier.fillMaxSize()
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
        ) {
            // ÌôîÎ©¥ ÏÉÅÎã® 1/4 Î∞ïÏä§
            Box(
                modifier = Modifier
                    .fillMaxWidth()
            ) {
                Image(
                    painter = painterResource(id = R.drawable.macdo_1_1),
                    contentDescription = null,
                    contentScale = ContentScale.Crop, // Ïù¥ÎØ∏ÏßÄ ÌôïÎåÄ/Ï∂ïÏÜå Î∞©Ïãù ÏÑ§Ï†ï
                    modifier = Modifier.fillMaxWidth()
                )
            }
            // Î¨¥Ìïú Ïä§ÌÅ¨Î°§ Î≤ÑÌäº ÏòÅÏó≠
            LazyColumn(
                modifier = Modifier
                    .fillMaxWidth()
                    .weight(1f)
                    .padding(horizontal = 8.dp)
            ) {
                items(buttonItems) { item ->
                    Button(
                        onClick = { navController.navigate("second") },
                        modifier = Modifier
                            .fillMaxWidth()
                            .height(400.dp) // ÌôîÎ©¥ ÎπÑÏú®Ïóê Îî∞Îùº Ï†ÅÏ†àÌïú ÎÜíÏù¥ ÏÑ§Ï†ï
                            .padding(vertical = 8.dp),
                        shape = MaterialTheme.shapes.medium // Í∏∞Î≥∏ Îë•Í∑º ÏÇ¨Í∞ÅÌòï Î™®Ïñë
                    ) {
                        Column(
                            horizontalAlignment = Alignment.CenterHorizontally,
                            verticalArrangement = Arrangement.Center,
                            modifier = Modifier.fillMaxSize()
                        ) {
                            Image(
                                painter = painterResource(id = item.imageRes), // Í∞Å Î≤ÑÌäºÏóê ÎßûÎäî Ïù¥ÎØ∏ÏßÄ
                                contentDescription = null,
                                modifier = Modifier.size(320.dp) // Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ ÏÑ§Ï†ï
                            )
                            Divider(modifier = Modifier.height(2.dp))
                            Spacer(modifier = Modifier.height(8.dp))
                            Text(text = item.label, fontSize = 16.sp)
                        }
                    }
                }
            }
        }
    }
}

@OptIn(ExperimentalMaterial3Api::class)

data class MenuItem(val name: String, val imageRes: Int)

@Composable
fun SecondScreen(navController: NavHostController) {
    val menuItems = listOf(
        MenuItem("Ï∂îÏ≤úÎ©îÎâ¥", R.drawable.macdo_2_2),
        MenuItem("Î≤ÑÍ±∞ÏÑ∏Ìä∏", R.drawable.macdo_2_3),
        MenuItem("Ìï¥ÌîºÏä§ÎÇµ", R.drawable.macdo_2_4),
        MenuItem("Ïä§ÎÇµ & ÏÇ¨Ïù¥Îìú", R.drawable.macdo_2_5),
        MenuItem("ÏùåÎ£å", R.drawable.macdo_2_6),
        MenuItem("ÎîîÏ†ÄÌä∏", R.drawable.macdo_2_7),
        MenuItem("Ìï¥ÌîºÎ∞Ä", R.drawable.macdo_2_8)
    )

    Scaffold(
        topBar = {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(16.dp)
            ) {
                Row(verticalAlignment = Alignment.CenterVertically) {
                    IconButton(onClick = { navController.popBackStack() }) {
                        Icon(
                            painter = painterResource(id = R.drawable.baseline_arrow_back_24),
                            contentDescription = "Back",)
                    }
                    Spacer(modifier = Modifier.width(8.dp))
                    Text(text = "MÏò§Îçî Ï£ºÎ¨∏", fontSize = 32.sp, color = Color.Black)
                }
                Spacer(modifier = Modifier.height(8.dp))
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Icon(
                        painter = painterResource(id = R.drawable.macdo_2_1), // ÏòàÏãú ÏïÑÏù¥ÏΩò Î¶¨ÏÜåÏä§
                        contentDescription = "MÏò§Îçî ÏïÑÏù¥ÏΩò",
                        modifier = Modifier.size(48.dp), // ÏïÑÏù¥ÏΩò ÌÅ¨Í∏∞ Ï°∞Ï†ï
                        tint = Color.Unspecified
                    )
                    Spacer(modifier = Modifier.width(8.dp))
                    Column(
                        modifier = Modifier.weight(1f)
                    ) {
                        Text(text = "Í∞ïÎÇ®2Ìò∏", fontSize = 16.sp, color = Color.Black)
                        Row(
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Text(text = "Ïö¥ÏòÅÏãúÍ∞Ñ: 24ÏãúÍ∞Ñ", fontSize = 14.sp, color = Color.Gray)
                            Spacer(modifier = Modifier.width(8.dp))
                            Text(text = "Îß§Ïû• Î≥ÄÍ≤ΩÌïòÍ∏∞", fontSize = 14.sp, color = Color.Blue)
                        }
                    }
                }
            }
        }
    ) { paddingValues ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues)
                .padding(16.dp)
        ) {
            Text(text = "Î©îÎâ¥ ÏÇ¥Ìé¥Î≥¥Í∏∞", fontSize = 20.sp, color = Color.Black)
            Spacer(modifier = Modifier.height(8.dp))
            LazyColumn {
                items(menuItems) { menuItem ->
                    Row(verticalAlignment = Alignment.CenterVertically) {
                        Image(
                            painter = painterResource(id = menuItem.imageRes),
                            contentDescription = null,
                            modifier = Modifier.size(40.dp) // Ïù¥ÎØ∏ÏßÄ ÌÅ¨Í∏∞ ÏÑ§Ï†ï
                        )
                        Spacer(modifier = Modifier.width(8.dp))
                        Text(text = menuItem.name, fontSize = 24.sp, color = Color.Black)
                    }
                    Divider(modifier = Modifier.height(1.dp))
                    Spacer(modifier = Modifier.height(24.dp))
                }
            }
        }
    }
}

@Preview(showBackground = true)
@Composable
fun MainScreenPreview() {
    MACDO_0524Theme {
        AppNavigator()
    }
}
